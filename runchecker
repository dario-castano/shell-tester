#!/bin/bash
#
# Performing checks on the Holberton School "simple shell" project
                   
#######################################
# Print KO, in red, followed by a new line
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function print_ko()
{
    echo -e "[\033[31mFAIL\033[37m]"
}

#######################################
# Print OK in green, followed by a new line
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function print_ok()
{
    echo -e "[\033[32mPASS\033[37m]"
}

#######################################
# Kill the shell in a clean way and remove temporary files
# Globals:
#   SHELL
#   OUTPUTFILE
#   ERROROUTPUTFILE
#   LTRACEOUTPUTFILE
# Arguments:
#   None
# Returns:
#   None
#######################################
function stop_shell()
{
    if [ `pidof $HSHELL | wc -l` -ne 0 ]; then
	   killall -9 $HSHELL 2>&1 > /dev/null
    fi
    rm -f $OUTPUTFILE $ERROROUTPUTFILE $LTRACEOUTPUTFILE
}

# Load configuration
source config

# Cleanup
echo -ne "\033[37m"
rm -f $OUTPUTFILE $LTRACEOUTPUTFILE

jp2a --width=48 --colors shmg
echo "################################################"
echo "####       Holberton's shell-tester         ####"
echo "################################################"

let COUNT_TESTS=0
let TESTS_PASSED=0
let TESTS_FAILED=0

# Locates all tests and launch them
for dir in `ls -d "$TESTDIR"/*/`
do
    echo ""
    echo -e "\e[34m>>>>>>>>>> TESTS INSIDE $dir <<<<<<<<<<\e[37m"
    echo ""
    for testname in `ls "$dir" | grep ".bash"`
    do
	   echo -n "   # $testname: "
	   source "$dir$testname"
       COUNT_TESTS=$((COUNT_TESTS + 1))
    done
done

echo ""
echo ">>>>>>>>>>>>>>>>>>>> SUMMARY <<<<<<<<<<<<<<<<<<<"
echo "TOTAL OF TESTS: $COUNT_TESTS"
echo "TESTS PASSED: $TESTS_PASSED"
echo "TESTS FAILED: $TESTS_FAILED"
echo ">>>>>>>>>>>>>>>>>>>>>> END <<<<<<<<<<<<<<<<<<<<<"
echo ""

# Cleanup
rm -f $OUTPUTFILE $LTRACEOUTPUTFILE $ERROROUTPUTFILE
rm -f checker_output_*
rm -f checker_tmp_file_*
rm -f /tmp/.checker_tmp_file_*
echo -ne "\e[0m"
